on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      comment-id:
        required: true
        type: string
      file:
        required: true
        type: string
      network:
        required: true
        type: string
      fn:
        required: true
        type: string
      send:
        required: true
        type: string
      pull_request_number:
        required: true
        type: string
      delete-branch-after-send:
        required: true
        type: string
      group_telegram_chat_id:
        required: false
        default: ''
        type: string
      announcement_telegram_chat_id:
        required: false
        default: false
        type: string
      failure_telegram_chat_id:
        required: false
        default: ''
        type: string
      runs_on:
        required: true
        type: string
      compiler_cache_version:
        required: false
        default: 'v0.0.1'
        type: string
      brownie_cache_version:
        required: false
        type: string
        default: 'v0.0.1'
      close_pr:
        required: false
        default: 'false'
        type: string
      check_reviews:
        required: false
        default: 'false'
        type: string
      cached_runner:
        required: false
        default: 'false'
        type: string
      be:
        required: false
        default: 'false'
        type: string
      from_pr:
        required: false
        default: 'true'
        type: string
      job_description:
        required: false
        default: 'default cronjob description'
        type: string
      job_author:
        required: false
        type: string
        default: 'no cron job author specified'
    secrets:
      COORDINAPE_BEARER_TOKEN:
        required: false
      TELEGRAM_TOKEN:
        required: true
      POLYGONSCAN_TOKEN:
        required: true
      FTMSCAN_TOKEN:
        required: true
      ETHERSCAN_TOKEN:
        required: true
      BSCSCAN_TOKEN:
        required: true
      ARBISCAN_TOKEN:
        required: true
      SNOWTRACE_TOKEN:
        required: true
      PRIVATE_KEY:
        required: true
      PAT:
        required: true
      YPRICEAPI_USER:
        required: false
      YPRICEAPI_PASS:
        required: false

jobs:
  roboanimalsWorkflow:
    runs-on: ${{ inputs.runs_on }}
    timeout-minutes: 60
    steps:
    - uses: hmarr/debug-action@v2
    - name: Create URL to the run output
      id: vars
      run: echo ::set-output name=run-url::https://github.com/${{github.repository}}/actions/runs/$GITHUB_RUN_ID

    - name: Save runner name
      id: runner_name
      run: echo ::set-output name=runner_name::$RUNNER_NAME
      
    - name: Edit comment with link to run
      if: ${{ inputs.from_pr == 'true' }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > 🚀 Agent ${{steps.runner_name.outputs.runner_name }} has picked up this request, follow progress [here](${{ steps.vars.outputs.run-url }})
          >
    - name: install git
      run: sudo apt install git

    - name: Checking out code
      uses: actions/checkout@v3.0.2
      with:
        ref: ${{ inputs.ref }}

    - name: Checkout submodules
      run: |
        git submodule update --init --recursive
    - name: Get PR title
      uses: actions/github-script@v3
      if: ${{ inputs.from_pr == 'true' }}
      id: get-pr-title
      with:
        script: |
          const {data: pull} = await github.pulls.get({...context.repo, pull_number: ${{ inputs.pull_request_number }}});
          if (!pull.title) {
            return 'Empty Title 🤡';
          }
          return pull.title.replace(/\$/g, '💲');
    - name: Get PR body
      uses: actions/github-script@v3
      if: ${{ inputs.from_pr == 'true' }}
      id: get-pr-body
      with:
        script: |
          const {data: pull} = await github.pulls.get({...context.repo, pull_number: ${{ inputs.pull_request_number }}});
          if (!pull.body) {
            return 'Empty Description 🤡';
          }
          return pull.body.replace(/\r\n/g, ' 🐶 ').replace(/\$/g, '💲');
    - name: Get PR author
      uses: actions/github-script@v3
      if: ${{ inputs.from_pr == 'true' }}
      id: get-pr-author
      with:
        script: |
          const {data: pull} = await github.pulls.get({...context.repo, pull_number: ${{ inputs.pull_request_number }}});
          if (pull.user.login === null) {
            return 'Empty Author 🤡';
          }
          return pull.user.login;
    - name: Pull down reviews
      uses: actions/github-script@v3
      if: ${{ inputs.check_reviews == 'true' }}
      id: get-pr
      with:
        script: |
          const { data: reviews } = await github.pulls.listReviews({
            ...context.repo,
            pull_number: ${{ inputs.pull_request_number }},
          })
          const approvals = reviews.filter(review => review.state == 'APPROVED')
          const reviews_filtered = approvals.filter(review => review.user.login != ${{ steps.get-pr-author.outputs.result }})
          core.info(`List of reviews:\n ${JSON.stringify(reviews_filtered)}`)
          return reviews_filtered.length
    - name: Check Reviews
      if: ${{ inputs.check_reviews == 'true' && inputs.send  == 'true' && steps.get-pr.outputs.result < 1}}
      run: exit 1

    - name: Fail on no reviews
      if: ${{ inputs.check_reviews == 'true' && failure() }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > Review requirement failed. Get at least one approval before sending.
    - name: Set up python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    
    - name: pip install multisig_ci
      run: |
        pip install multisig_ci==0.4.3
    - name: Starting running message
      if: ${{ inputs.from_pr == 'true' }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > 🏃 running ${{ inputs.fn }} using brownie 🤎 on the ${{ inputs.network }} network
          >
    - name: Run Function
      id: fn
      timeout-minutes: 45
      env:
        LD_LIBRARY_PATH: /usr/local/lib
        pythonLocation: /usr/local/bin/
        COORDINAPE_BEARER_TOKEN: ${{ secrets.COORDINAPE_BEARER_TOKEN }}
        POLYGONSCAN_TOKEN: ${{ secrets.POLYGONSCAN_TOKEN }}
        FTMSCAN_TOKEN: ${{ secrets.FTMSCAN_TOKEN }}
        ETHERSCAN_TOKEN: ${{ secrets.ETHERSCAN_TOKEN }}
        BSCSCAN_TOKEN: ${{ secrets.BSCSCAN_TOKEN }}
        ARBISCAN_TOKEN: ${{ secrets.ARBISCAN_TOKEN }}
        SNOWTRACE_TOKEN: ${{ secrets.SNOWTRACE_TOKEN }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        GITHUB_ACTION_SEND: ${{ inputs.send }}
        BE: ${{ inputs.be }}
        YPRICEAPI_USER: ${{ secrets.YPRICEAPI_USER }}
        YPRICEAPI_PASS: ${{ secrets.YPRICEAPI_PASS }}
      uses: yearn/yearn-workflows@use-weiroll
      with:
        file: ${{inputs.file}} 
        network: ${{inputs.network}}
        fn: ${{inputs.fn}}

    - name: Nonce fail check, add comment
      if: inputs.send == 'true' && steps.fn.outputs.nonce == ''
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > Did not find nonce.txt. Did you run with send=true without actually posting the transaction at the end of your function? Use the @sign decorator above your function.
    - name: New TX Telegram Alert - MultiSig Chat
      env:
        TELEGRAM_MESSAGE: "Oof, ${{ steps.get-pr-author.outputs.result }} just tried to send a transaction without putting the @sign decorator above the function... Please join me in shaming this 🤡"
      if: inputs.send == 'true' && steps.fn.outputs.nonce == ''
      run: |
        python3 -m multisig_ci send_and_pin_message ${{ secrets.TELEGRAM_TOKEN }} ${{ inputs.group_telegram_chat_id }}
      continue-on-error: true

    - name: Nonce fail check
      if: inputs.send == 'true' && steps.fn.outputs.nonce == ''
      run: |
        exit 1
    - name: Safe url check, add comment
      if: inputs.send == 'true' && steps.fn.outputs.safe_link == ''
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > Fatal error. Did not find safe.txt.
    - name: Safe fail check, add comment
      if: inputs.send == 'true' && steps.fn.outputs.safe_link == ''
      run: |
        exit 1

    - name: Fix ansi codes
      if: always() && inputs.from_pr == 'true'
      run: |
        sed -i 's/\x1b\[[0-9;]*m//g' ${{env.GITHUB_WORKSPACE}}error.txt
        sed -i 's/\x1b\[[0-9;]*m//g' ${{env.GITHUB_WORKSPACE}}output.txt
    - name: Read error.txt
      if: always() && inputs.from_pr == 'true'
      id: read_error
      uses: juliangruber/read-file-action@v1
      with:
        path: ${{env.GITHUB_WORKSPACE}}error.txt

    - name: Read output.txt
      if: always() && inputs.from_pr == 'true'
      id: read_output
      uses: juliangruber/read-file-action@v1
      with:
        path: ${{env.GITHUB_WORKSPACE}}output.txt

    - name: Edit comment with error message
      if: ${{ failure() && inputs.from_pr == 'true' }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > ❌ Failure, check failure [logs](${{ steps.vars.outputs.run-url }}) below
          Output:
          ```
          ${{ steps.read_output.outputs.content }} 
          ```
          
          Error: 
          ```
          ${{ steps.read_error.outputs.content }}
          ```
    - name: Edit comment with dry run message
      if: ${{ inputs.send  == 'false' && inputs.from_pr == 'true'}}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > ✅ Dry run success, see output [here](${{ steps.vars.outputs.run-url }})
          > Rerun the command with send=true to publish the TX to the safe
          
          Output:
          ```
          ${{ steps.read_output.outputs.content }}
          ```
      continue-on-error: true

    - name: Set PR url
      if: ${{ inputs.from_pr == 'true' }}
      id: pr-url
      run: |
        echo "::set-output name=pr-url::https://github.com/${{github.repository}}/pull/${{ inputs.pull_request_number }}/files"
    - name: Create Telegram message - from PR
      if: ${{ inputs.send  == 'true' && inputs.from_pr == 'true' }}
      run: |
          TELEGRAM_MESSAGE=$(cat << EOF
          ✍️ [${{ inputs.network}} #${{ steps.fn.outputs.nonce }}](${{ steps.fn.outputs.safe_link }}) \`${{ steps.get-pr-title.outputs.result}}\`
          Sender: ${{ steps.get-pr-author.outputs.result }}
          Description: \`${{ steps.get-pr-body.outputs.result }}\`
          Review [the code](${{ steps.pr-url.outputs.pr-url }}), verify [the output](${{ steps.vars.outputs.run-url }}), and [sign here](${{ steps.fn.outputs.safe_link }})
          EOF
          )
          echo "TELEGRAM_MESSAGE<<EOF" >> $GITHUB_ENV
          echo "$TELEGRAM_MESSAGE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
    - name: Create Telegram message - automated
      if: ${{ inputs.send  == 'true' && inputs.from_pr == 'false' }}
      run: |
          TELEGRAM_MESSAGE=$(cat << EOF
          ✍️ [${{ inputs.network}} #${{ steps.fn.outputs.nonce }}](${{ steps.fn.outputs.safe_link }}) \`${{ steps.get-pr-title.outputs.result}}\`
          Sender: ${{ inputs.job_author }} (via cronjob or manual trigger)
          Description: ${{ inputs.job_description }}
          Function ran: ${{ inputs.fn }} in ${{inputs.file}}.py
          Verify [the output](${{ steps.vars.outputs.run-url }}), and [sign here](${{ steps.fn.outputs.safe_link }})
          EOF
          )
          echo "TELEGRAM_MESSAGE<<EOF" >> $GITHUB_ENV
          echo "$TELEGRAM_MESSAGE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
    - name: New TX Telegram Alert - Robowoofy Alert Chat
      if: ${{ inputs.send == 'true' }}
      run: |
        python3 -m multisig_ci send_and_pin_message ${{ secrets.TELEGRAM_TOKEN }} ${{ inputs.announcement_telegram_chat_id }}
      continue-on-error: true

    - name: New TX Telegram Alert - MultiSig Chat
      if: ${{ inputs.send == 'true' }}
      run: |
        python3 -m multisig_ci send_and_pin_message ${{ secrets.TELEGRAM_TOKEN }} ${{ inputs.group_telegram_chat_id }}
      continue-on-error: true

    - name: Edit comment with full run message
      if: ${{ inputs.send  == 'true' && inputs.from_pr == 'true' }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        body: |
          > ✅ TX with nonce ${{ steps.fn.outputs.nonce }} successfully sent. Find output logs [here](${{ steps.vars.outputs.run-url }}). 
          > Find your queued TX on the [Gnosis UI](${{ steps.fn.outputs.safe_link }})
          >
          > Your PR has been labeled with tag ${{inputs.network}} ${{ steps.fn.outputs.nonce }}, which you can find [here](https://github.com/yearn/strategist-ms/labels?q=${{ steps.fn.outputs.nonce }}).
          
          Output:
          ```
          ${{ steps.read_output.outputs.content }}
          ```
      continue-on-error: true

    - uses: actions-ecosystem/action-add-labels@v1
      if: ${{ inputs.send  == 'true' && inputs.from_pr == 'true' }}
      with:
        number: ${{ inputs.pull_request_number }}
        github_token: ${{ secrets.PAT }}
        labels: |
          ${{ inputs.network }} #${{ steps.fn.outputs.nonce }}
      continue-on-error: true

    - uses: peter-evans/close-pull@v1
      if: ${{ inputs.send  == 'true' && inputs.close_pr == 'true' && inputs.from_pr == 'true' }}
      with:
        pull-request-number: ${{ inputs.pull_request_number }}
        comment: Auto-closing pull request
      continue-on-error: true

    - name: Delete PRs head branches
      if: ${{ inputs.delete-branch-after-send == 'true' && inputs.send  == 'true' && inputs.from_pr == 'true'}}
      uses: dawidd6/action-delete-branch@v3
      with:
        github_token: ${{ secrets.PAT }}
        numbers: ${{ inputs.pull_request_number }}
      continue-on-error: true

    - name: Add reaction
      if: ${{ inputs.from_pr == 'true' }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ inputs.comment-id }}
        reaction-type: hooray
      continue-on-error: true
